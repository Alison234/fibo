// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fiboproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FibonaciApiClient is the client API for FibonaciApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonaciApiClient interface {
	Seq(ctx context.Context, in *SeqRequest, opts ...grpc.CallOption) (*SeqResponse, error)
}

type fibonaciApiClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonaciApiClient(cc grpc.ClientConnInterface) FibonaciApiClient {
	return &fibonaciApiClient{cc}
}

func (c *fibonaciApiClient) Seq(ctx context.Context, in *SeqRequest, opts ...grpc.CallOption) (*SeqResponse, error) {
	out := new(SeqResponse)
	err := c.cc.Invoke(ctx, "/api.FibonaciApi/Seq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibonaciApiServer is the server API for FibonaciApi service.
// All implementations must embed UnimplementedFibonaciApiServer
// for forward compatibility
type FibonaciApiServer interface {
	Seq(context.Context, *SeqRequest) (*SeqResponse, error)
	mustEmbedUnimplementedFibonaciApiServer()
}

// UnimplementedFibonaciApiServer must be embedded to have forward compatible implementations.
type UnimplementedFibonaciApiServer struct {
}

func (UnimplementedFibonaciApiServer) Seq(context.Context, *SeqRequest) (*SeqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seq not implemented")
}
func (UnimplementedFibonaciApiServer) mustEmbedUnimplementedFibonaciApiServer() {}

// UnsafeFibonaciApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibonaciApiServer will
// result in compilation errors.
type UnsafeFibonaciApiServer interface {
	mustEmbedUnimplementedFibonaciApiServer()
}

func RegisterFibonaciApiServer(s grpc.ServiceRegistrar, srv FibonaciApiServer) {
	s.RegisterService(&FibonaciApi_ServiceDesc, srv)
}

func _FibonaciApi_Seq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonaciApiServer).Seq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FibonaciApi/Seq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonaciApiServer).Seq(ctx, req.(*SeqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FibonaciApi_ServiceDesc is the grpc.ServiceDesc for FibonaciApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibonaciApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FibonaciApi",
	HandlerType: (*FibonaciApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Seq",
			Handler:    _FibonaciApi_Seq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
